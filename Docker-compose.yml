version: "3"
services:
  
  web:
    container_name: reactContainer
    build: 
      context: ./Front-End-React-And-Keycloak
      dockerfile: Dockerfile
    ports:
      - 3000:80
  
  spring:
    container_name: jarContainer
    build: 
      context: ./Back-End-Spring
      dockerfile: Dockerfile
    ports:
      - 8090:8090
    networks:
       - keycloak_dev_network
    command: ["java", "-jar", "/app.jar"]
  
  keycloak:
    container_name: keycloakContainer
    image: quay.io/keycloak/keycloak:21.1.1
    environment:
      KEYCLOAK_IMPORT: /tmp/realm-export.json
      KC_DB: postgres
      KC_DB_URL_HOST: postgres_keycloak
      KC_DB_URL_DATABASE: keycloak
      KC_DB_PASSWORD: password
      KC_DB_USERNAME: keycloak
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 8080:8080
    volumes:
      - ./Keycloak/realm-export.json:/tmp/realm-export.json
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    networks:
      - keycloak_dev_network
    command:
      - start-dev
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=singleFile"
      - "-Dkeycloak.migration.file=/tmp/realm-export.json"
      - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"

  postgres_keycloak:
    image: postgres:14.2
    command: postgres -c 'max_connections=200'
    volumes:
      - pgdata_keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
    ports:
      - "5432:5432"
    networks:
      - keycloak_dev_network

volumes:
  pgdata_keycloak:

networks:
  keycloak_dev_network:
    driver: bridge